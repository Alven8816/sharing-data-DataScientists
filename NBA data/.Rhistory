table(datas)
names(affs)<- 2000:2015
affs
table(affs)
barplot(count$eachyear, las=2, ylim=c(0,11000), main="Number of PubMed articles \n which its title containing Meta analysis")
axis(1,seq(from = 0.7,by = 1.2, length.out = 16),labels = year,tick = FALSE,cex.axis = 0.8)
text(labels = eachyear,cex = 0.7,x = seq(from = 0.7,by =1.2,length.out = 16),y= eachyear+1000)
barplot(pro, las=2, ylim=c(0,10),ylab = "percentage(%)", main="Percentage of Meta analysis which come from China")
axis(1,seq(from = 0.7,by = 1.2, length.out = 16),labels = year,tick = FALSE,cex.axis = 0.8)
text(labels = paste(round(pro,2),"%",sep = ""),cex = 0.7,x = seq(from = 0.7,by =1.2,length.out = 16),y= pro+0.5)
library(wordcloud)
library(wordcloud)
res2 <- EUtilsSummary("Meta analysis[ti]",type = "esearch",db="pubmed",reldate=30)
EUtilsGet(res2)
QueryCount(EUtilsGet(res2))
Author(EUtilsGet(res2))
QueryCount(EUtilsGet(res2))
QueryId(res2)
res2 <- EUtilsSummary("Meta analysis[ti]",type = "esearch",db="pubmed",reldate=7)
QueryId(res2)
res2 <- EUtilsSummary("Wenhua Yu[au]",type = "esearch",db="pubmed",mindate= 2013,maxdate=2015)
summary(res2)
Affiliation(EUtilsGet(res2))
grepl("Tianjin",Affiliation(EUtilsGet(r)))
grepl("Tianjin",Affiliation(EUtilsGet(res2)))
index <- grepl("Tianjin",Affiliation(EUtilsGet(res2)))
res2[index]
ArticleId(EUtilsGet(res2))
res2 <- EUtilsSummary("Wenhua Yu[au] Tianjin",type = "esearch",db="pubmed",mindate= 2013,maxdate=2015)
Summary(res2)
summary(res2)
Title(EUtilsGet(res2))
ArticleTitle(EUtilsGet(res2))
library(wordcloud)
Abstract<- AbstractText(EUtilsGet(res2))
articles<-data.frame(Abstract))
articles<-data.frame(Abstract)
abstracts<-as.character(articles$Abstract)
abstracts<-paste(abstracts, sep="", collapse="")
wordcloud(abstracts, min.freq=10, max.words=70, colors=brewer.pal(7,"Dark2"))
wordcloud(abstracts, min.freq=10, max.words=500, colors=brewer.pal(7,"Dark2"))
wordcloud(abstracts, min.freq=10, max.words=1000, colors=brewer.pal(7,"Dark2"))
wordcloud(abstracts, min.freq=5, max.words=1000, colors=brewer.pal(7,"Dark2"))
wordcloud(abstracts, min.freq=3, max.words=1000, colors=brewer.pal(7,"Dark2"))
wordcloud(abstracts, min.freq=4, max.words=500, colors=brewer.pal(7,"Dark2"))
wordcloud(abstracts, min.freq=5, max.words=500, colors=brewer.pal(7,"Dark2"))
wordcloud(abstracts, min.freq=8, max.words=500, colors=brewer.pal(7,"Dark2"))
wordcloud(abstracts, min.freq=8, max.words=1000, colors=brewer.pal(7,"Dark2"))
wordcloud(abstracts, min.freq=7, max.words=1000, colors=brewer.pal(7,"Dark2"))
wordcloud(abstracts, min.freq=6, max.words=1000, colors=brewer.pal(7,"Dark2")
wordcloud(abstracts, min.freq=6, max.words=1000, colors=brewer.pal(7,"Dark2"))
wordcloud(abstracts, min.freq=5, max.words=1000, colors=brewer.pal(7,"Dark2"))
wordcloud(abstracts, min.freq=5, max.words=500, colors=brewer.pal(7,"Dark2"))
wordcloud(abstracts, min.freq=5, max.words=1000, colors=brewer.pal(7,"Dark2"))
wordcloud(abstracts, min.freq=4, max.words=1000, colors=brewer.pal(7,"Dark2"))
wordcloud(abstracts, min.freq=4, max.words=500, colors=brewer.pal(7,"Dark2"))
wordcloud(abstracts, min.freq=3, max.words=500, colors=brewer.pal(7,"Dark2"))
wordcloud(abstracts, min.freq=3, max.words=1000, colors=brewer.pal(7,"Dark2"))
wordcloud(abstracts, min.freq=3, max.words=500, colors=brewer.pal(7,"Dark2"))
wordcloud(abstracts, min.freq=4, max.words=500, colors=brewer.pal(7,"Dark2"))
wordcloud(abstracts, min.freq=3, max.words=500, colors=brewer.pal(7,"Dark2"))
wordcloud(abstracts, colors=brewer.pal(7,"Dark2"))
wordcloud(abstracts,max.words=500,
min.freq = 10 colors=brewer.pal(7,"Dark2"))
wordcloud(abstracts,max.words=500,
min.freq = 10,colors=brewer.pal(7,"Dark2"))
wordcloud(abstracts,max.words=500,
min.freq = 5,colors=brewer.pal(7,"Dark2"))
wordcloud(abstracts,colors=brewer.pal(7,"Dark2"))
sum(eachyear)
affs
library(RISmed)
barplot(pro, las=2, ylim=c(0,10),ylab = "percentage(%)", main="Percentage of Meta analysis which come from China")
axis(1,seq(from = 0.7,by = 1.2, length.out = 16),labels = year,tick = FALSE,cex.axis = 0.8)
text(labels = paste(round(pro,2),"%",sep = ""),cex = 0.7,x = seq(from = 0.7,by =1.2,length.out = 16),y= pro+0.5)
barplot(affs, las=2, ylim=c(0,500), main="Number of Meta analysis articles \n in PubMed which come from China ")
axis(1,seq(from = 0.7,by = 1.2, length.out = 16),labels = year,tick = FALSE,cex.axis = 0.8)
text(labels = eachyear,cex = 0.7,x = seq(from = 0.7,by =1.2,length.out = 16),y= affs+50)
barplot(affs, las=2, ylim=c(0,500), main="Number of Meta analysis articles \n in PubMed which come from China ")
text(labels = eachyear,cex = 0.7,x = seq(from = 0.7,by =1.2,length.out = 16),y= affs+100)
barplot(affs, las=2, ylim=c(0,500), main="Number of Meta analysis articles \n in PubMed which come from China ")
text(labels = eachyear,cex = 0.7,x = seq(from = 0.7,by =1.2,length.out = 16),y= affs+50)
barplot(affs, las=2, ylim=c(0,500), main="Number of Meta analysis articles \n in PubMed which come from China ")
text(labels = affs,cex = 0.7,x = seq(from = 0.7,by =1.2,length.out = 16),y= affs+50)
barplot(count$eachyear, las=2, ylim=c(0,11000), main="Number of PubMed articles \n which its title containing Meta analysis")
text(labels = eachyear,cex = 0.7,x = seq(from = 0.7,by =1.2,length.out = 16),y= eachyear+1000)
barplot(pro, las=2, ylim=c(0,10),ylab = "percentage(%)", main="Percentage of Meta analysis which come from China")
axis(1,seq(from = 0.7,by = 1.2, length.out = 16),labels = year,tick = FALSE,cex.axis = 0.8)
text(labels = paste(round(pro,2),"%",sep = ""),cex = 0.7,x = seq(from = 0.7,by =1.2,length.out = 16),y= pro+0.5)
barplot(pro, las=2, ylim=c(0,10),ylab = "percentage(%)", main="Percentage of Meta analysis \n which come from China")
axis(1,seq(from = 0.7,by = 1.2, length.out = 16),labels = year,tick = FALSE,cex.axis = 0.8)
text(labels = paste(round(pro,2),"%",sep = ""),cex = 0.7,x = seq(from = 0.7,by =1.2,length.out = 16),y= pro+0.5)
hcc <- c(166,47)
hbv <- c(129,73)
data <- data.frame(hcc,hbv,row.names = c("male","female"))
data
table(data)
fisher.test(data)
chisq.test(data)
install.packages("Rweibo", repos = "http://jliblog.com/cran")
library(rJava)
install.packages("rjava")
install.packages("rJava")
library(rJava)
library(rJava)
library(rJava)
library(rJava)
Sys.setenv(JAVA_HOME="C:\Program Files (x86)\Java\jdk1.8.0_71\jre")
Sys.setenv(JAVA_HOME="C:/Program Files (x86)/Java/jdk1.8.0_71/jre")
library(rJava)
library(rJava)
Sys.setenv(JAVA_HOME="C:/Program Files (x86)/Java/jdk1.8.0_71/jre")
library(ReporteRs)
Sys.setenv(JAVA_HOME="C:/Program Files (x86)/Java/jdk1.8.0_71/jre")
library(rJava)
library(xlsx)
library(xlsx)
library(RISmed)
library(pander)
library(pander)
m <- data.frame(a = c(1, -500, 10320, 23, 77),
b = runif(5),
c = c('a', 'bb', 'ccc', 'dddd', 'eeeee'))
pandoc.table(m)
pandoc.table(m, justify = c('right', 'left', 'centre'))
pandoc.table(m, justify = 'rlc') # Same as upper statement
pandoc.table(mtcars)
pandoc.table(mtcars, caption = 'Only once after the first part!')
t <- data.frame(a = c('hundreds\nof\nmouses', '3 cats'), b=c('FOO is nice', 'BAR\nBAR2'))
t
pandoc.table(t)
pandoc.table(t, split.cells = 5)
pandoc.table(m)
pandoc.table(m, style = "grid")
pandoc.table(m, style = "simple")
pandoc.table(t, style = "grid")
pandoc.table(t, style = "grid", split.cells = 5)
pandoc.table(t, style = "grid", split.cells = 7)
pandoc.table(t, style = "grid", split.cells = 3)
t <- mtcars[1:3, 1:5]
t
pandoc.table(t$mpg, emphasize.italics.cells = 1)
pandoc.table(t$mpg, emphasize.strong.cells = 1)
pandoc.table(t, emphasize.italics.cells = 1:2)
pandoc.table(t$disp, emphasize.italics.cells = 1:2)
pandoc.table(t, emphasize.verbatim.cells = which(t == 6, arr.ind = TRUE),
emphasize.italics.rows = 1)
emphasize.cols(1)
pandoc.table(mtcars[1:3, 1:3], plain.ascii = TRUE)
x <- data.frame(a="Pandoc\nPackage")
pandoc.table(x, keep.line.breaks = TRUE)
pandoc.table(x)
x <- data.frame(a = "foo bar", b = "foo bar")
x
pandoc.table(x, split.cells = 4)
pandoc.table(x, split.cells = 7)
pandoc.table(x, split.cells = c(4, 7))
vignette('knitr', package = 'pander')
head(iris)
knitr::kable(head(iris))
library(Rz)
install.packages("Rz")
library(Rz)
ct <- CrossTable(mtcars$gear, mtcars$cyl)
library(Rz)
ct <- CrossTable(mtcars$gear, mtcars$cyl)
library(descr, quietly = TRUE)
install.packages("descr")
library(descr, quietly = TRUE)
ct <- CrossTable(mtcars$gear, mtcars$cyl)
ct
knitr::kable(ct)
library(tables, quietly = TRUE)
install.packages("tables")
library(tables, quietly = TRUE)
tab <- tabular( (Species + 1) ~ (n=1) + Format(digits=2)*
(Sepal.Length + Sepal.Width)*(mean + sd), data=iris )
tab
pander(CrossTable(mtcars$gear, mtcars$cyl))
library(pander)
pander(CrossTable(mtcars$gear, mtcars$cyl))
pander(tab)
89/25
a <-mean(c(89,72,94,69))
a
8/25
a <-mean(c(89,72,94,69)^2)
c(89,72,94,69)^2
a
b <-c(89,72,94,69)^2
(4761-mean(b))/(max(b)-min(b))
(4761-mean(b))
(max(b)-min(b))
max(b)
-1914.5/4075
A <- matrix(16,2,3,13,5,11,10,8,9,7,6,12,4,14,15,1,nrow = 4,ncol = 4)
A <- matrix(c(16,2,3,13,5,11,10,8,9,7,6,12,4,14,15,1),nrow = 4,ncol = 4)
A
A <- matrix(c(16,2,3,13,5,11,10,8,9,7,6,12,4,14,15,1),nrow = 4,ncol = 4,byrow = TRUE)
A
v <- matrix(1:7,1,7)
v
v <- matrix(1:7,7,1)
v
w <- v
w
t(w)*v
t(w)
t(w)%*%t
t(w)%*%v
t(v)%*%w
v <- matrix(1:49,7,7)
v
log(v)
v^2
v/4
v+1
w*v
v
w
v <- w
v
w*v
sum(w*v)
t(w)%*%v
A <- matrix(repeat(0),10,10)
A <- matrix(repeat(0,100),10,10)
A <- matrix(repeat(0,100),10,10)
repeat(0,100)
data1$resultSets[[1]]$rowSet[,c(1,2,7,8,10)]
setwd("F:/乐享数据DataScientists(data-sharing)/NBA data")
data1 <- "F:\\乐享数据DataScientists(data-sharing)\\sharing-data-DataScientists\\Pagerank Algorithm分析金州勇士队员排名及传球路线\\gsw_passing_network-master" %>>%
list.files("\\.json",full.names = TRUE) %>>%
list.load(action = "ungroup")
library(pipeR)
library(rlist)
data1 <- "F:\\乐享数据DataScientists(data-sharing)\\sharing-data-DataScientists\\Pagerank Algorithm分析金州勇士队员排名及传球路线\\gsw_passing_network-master" %>>%
list.files("\\.json",full.names = TRUE) %>>%
list.load(action = "ungroup")
data1$resultSets[[1]]$rowSet[,c(1,2,7,8,10)]
a <- fromJSON(file = "C:/Users/HP/Desktop/NBA data/gsw_passing_network-master/2571.json")
library(jsonlite)
a <- fromJSON(file = "C:/Users/HP/Desktop/NBA data/gsw_passing_network-master/2571.json")
a <- fromJSON(file = "F:\\乐享数据DataScientists(data-sharing)\\sharing-data-DataScientists\\Pagerank Algorithm分析金州勇士队员排名及传球路线\\gsw_passing_network-master\\2571.json")
a <- fromJSON(file = "F:\\乐享数据DataScientists(data-sharing)\\NBA data\\2571.json")
library(jsonlite)
a <- fromJSON(file = "F:\\乐享数据DataScientists(data-sharing)\\NBA data\\2571.json")
a <- fromJSON("F:\\乐享数据DataScientists(data-sharing)\\NBA data\\2571.json")
a
readLines("2571.json")
readLines("2571.json")
paste(readLines("2571.json"),collapse = '')
paste(readLines("2571.json"),collapse = "")
a <- fromJSON("F:\\乐享数据DataScientists(data-sharing)\\NBA data\\2571.json")
a
a$resultSets
a$resultSets$rowSet
a$resultSets$rowSet[1]
class(a)
list.select(a,rowSet[1])
list.select(a,"rowSet")
list.select(a,.$rowSwt)
list.select(a,a$resultSets$rowSet[1])
a$resultSets$rowSet
a$resultSets$rowSet[,c(1,2,7,8)]
a$resultSets$rowSet[[1]][,c(1,2,7,8)]
files <- "F:\\乐享数据DataScientists(data-sharing)\\sharing-data-DataScientists\\Pagerank Algorithm分析金州勇士队员排名及传球路线\\gsw_passing_network-master"
files_list <- dir(files,full.names = TRUE)
files_list
files_list <- dir(files)
files_list
dir(files,pattern = "\\.json")
files_list <- dir(files,pattern = "\\.json")
files_list <- dir(files,pattern = "\\.json",full.names = TRUE)
files_list
data_list <- lapply(files_list,jsonlite::fromJSON)
data_list
str(data_list)
str(data_list)
data_list$resultSets$rowSet
data_list$resultSets
class(data_list)
data_list[1]
data_list[1][[1]]$resultSets
data_list[1][[1]]$resultSets$rowSet
data_list[1][[1]]$resultSets$rowSet[[1,2]][,c(1,2,5,7,8)]
data_list[1][[1]]$resultSets$rowSet[[c(1,2)]][,c(1,2,5,7,8)]
data_list[1][[1]]$resultSets$rowSet[[1]][,c(1,2,5,7,8)]
data_list[1][[1]]$resultSets$rowSet[[2]][,c(1,2,5,7,8)]
list.select(data_list,resultSets$rowSet[[1]])
list.select(data_list,resultSets$rowSet)
raw_data <- list.select(data_list,resultSets$rowSet)
str(raw_data)
lapply(raw_data,rbind)
lapply(raw_data,1,rbind)
sapply(raw_data,rbind)
b <- sapply(raw_data,rbind)
b[1]
b[1][1]
cbind(b[1][1],b[1][2])
b[[1]]
b[[1]][1]
b1 <- as.data.frame(b[[1]][1])
b1
b1 <- as.data.frame(b[[1]][1])
b2 <- as.data.frame(b[[1]][2])
b_total <- cbind(b1,b2)
b_total
b[[1]][1]
b[[1]][1][,c(1,2,5,7,8)]
b1 <- as.data.frame(b[[1]][1])[,c(1,2,5,7,8)]
b1
b2 <- as.data.frame(b[[1]][2])[,c(1,2,5,7,8)]
b2
b <- sapply(raw_data,rbind)
b1 <- as.data.frame(b[[1]][1])[,c(1,2,5,7,8,9)]
b1
b[1]
raw_data
data_list <- lapply(files_list,jsonlite::fromJSON)
data_list
name_data <- list.select(data_list,resultSets$headers)
name_data
name_data <- list.select(data_list,resultSets$headers[[1]])
name_data
data_list$resultSets$header
data_list[1][[1]]$resultSets$names
data_list[1][[1]]$resultSets
data_list[1][[1]]$resultSets["header"]
data_list[1][[1]]$resultSets[header]
data_list[1][[1]]$resultSets[,"header"]
data_list[1][[1]]$resultSets[1]
data_list[1][[1]]$resultSets[2]
data_list[1][[1]]$resultSets[,"headers"]
data_list[1][[1]]$resultSets[,"headers"][1]
name_data <- list.select(data_list,resultSets$headers[[1]])
name_data
list.select(data_list,resultSets$headers[[1]])
list.select(data_list,resultSets$headers[[1]][1])
list.select(data_list,resultSets$headers[[1]])[1]
name <- as.matrix(name_data)
name
name <- as.data.frame(name_data)
name
name <- as.data.frame(name_data,header = FALSE)
name
name_data
name_data <- list.select(data_list,resultSets$headers[[1]])[1]
name_data
b <- sapply(raw_data,rbind)
b1 <- as.data.frame(b[[1]][1])[,c(1,2,5,7,8,10)]
b2 <- as.data.frame(b[[1]][2])[,c(1,2,5,7,8,10)]
b_total <- cbind(b1,b2)
b_total
b_total <- cbind(b1,b2)[,C(-7,-8)]
b_total <- b_total[,C(-7,-8)]
b_total <- b_total[,-C(7,8)]
b_total[,-7]
b_total[,-C(7,8)]
b_total <- b_total[,-C(7,8)]
b_total[,-C(8)]
b_total <- b_total[,-c(7,8)]
b_total
b
length(b)
d <- NULL
f <- NULL
for( i in 1:length(b)) {
d[i] <- as.data.frame(b[[i]][1])[,c(1,2,5,7,8,10)]
f[i] <- as.data.frame(b[[i]][2])[,c(1,2,5,7,8,10)]
d_total <- cbind(d,f)
d_total <- b_total[,-c(7,8)]
}
d_total
d
b
d <- NULL
f <- NULL
a <- NULL
for( i in 1:length(b)) {
d[i] <- as.data.frame(b[[i]][1])[,c(1,2,5,7,8,10)]
a <- rbind(d[i],d[i+1])
}
a
b
b[[1]][1]
d <- NULL
a <- NULL
for( i in 1:length(b)) {
d[i] <- as.data.frame(b[[i]][1])[,c(1,2,5,7,8,10)]
a <- rbind(d[i],d[i+1])
}
warnings()
b[[1]]
b[[1]][[1]]
c(b[[1]][[1]],b[[1]][[2]])
list.merge(b[[1]][[1]],b[[1]][[2]])
l1 <-list(a=1,b=list(x=1,y=1))
l2 <-list(a=2,b=list(z=2))
l3 <-list(a=2,b=list(x=3))
list.merge(l1,l2)
list.merge(l1,l2,l3)
list.names(c(1,2,3))
list.names(c(a=1,b=2,c=3))
list.names(c(1,2,3),letters[.])
list.names(list(list(name='A',value=10),list(name='B',value=20)), name)
(list(list(name='A',value=10),list(name='B',value=20)
)
)
b[[1]][1]
list.names(b[[1]][1],"d1")
list.names(b[[1]][2],"d2")
list.merge(d1,d2)
d1 <- list.names(b[[1]][1],"d1")
d2 <- list.names(b[[1]][2],"d2")
list.merge(d1,d2)
d <- list.merge(d1,d2)
d
unlist(d)
data.frame(unlist(d))
list(d1,d2)
d2 <- list.names(b[[1]][2],"d1")
list.merge(d1,d2)
x <- list(p1 = list(type='A',score=list(c1=10,c2=8))
p2 = list(type='B',score=list(c1=9,c2=9)),
p3 = list(type='B',score=list(c1=9,c2=7)))
x <- list(p1 = list(type='A',score=list(c1=10,c2=8)),
p2 = list(type='B',score=list(c1=9,c2=9)),
p3 = list(type='B',score=list(c1=9,c2=7)))
x
m<-list(x)
m
m[[1]]
m$filter(type=="B")$
map(score$c1)[]
library(rlist)
m$filter(type=="B")$
map(score$c1)[]
m$filter(type=='B')$
map(score$c1) []
m$group(type)$
map(g ~ List(g)$
map(score)$
call(unlist)$
call(mean) []) []
m<-list(x)
m$filter(type=='B')$
map(score$c1) []
m<-list(x)
m$filter(type=='B')$
map(score$c1) []
m<-list(x)
filter(m,type =='B')
filter(m,m$type =='B')
m
list.filter(m,type =='B')
list.filter(m,$type =='B')
list.filter(m,.$type =='B')
list.filter(m,p1$type =='B')
list.filter(m,$p3$type =='B')
list.filter(m,p3$type =='B')
list.select(m,type =='B')
list.select(m,p3$type =='B')
list.map(m,type)
list.map(m,p1)
list.map(m,p1$type)
p <- list(list(a=1,b=2))
p
p["a"]
p[["a"]]
p$a
p['a']
p[['a']]
p$a <-2
p
p['b'] <- NULL
p
p['a']
p[`a`]
p['a']
p
p['a']
p <- List(list(a=1,b=2))
p
x <- list(p1 = list(type='A',score=list(c1=10,c2=8)),
p2 = list(type='B',score=list(c1=9,c2=9)),
p3 = list(type='B',score=list(c1=9,c2=7)))
x
m<-List(x)
m$filter(type=='B')$
map(score$c1) []
m
m$filter(type =='B')
m$group(type)
m$group(type)$
map(g ~ List(g)
m$group(type)$
map(g ~ List(g)$
map(score)$
call(unlist)$
call(mean) []) []
m$group(type)$
map(g ~ List(g)$
map(score)$
call(unlist)$
call(mean) []) []
p <- List(list(a=1,b=2))
p
p["a"]
p[["a"]]
p$a
p$a
