data_car
data_label <- xgb.DMatrix(car_label)
agaricus.train
agaricus.train$label
str(agaricus.train)
str(data_car)
n <- createDataPartition(car_label,p=0.5,list = FALSE)
data_car[,n]
car_vars <- cbind(car_num,one_hot_vars)
n <- createDataPartition(car_label,p=0.5,list = FALSE)
train_label <- car_label[n]
train_xgb <- car_vars[n,]
train_xgb <- car_vars[n,]
train_label <- car_label[n]
test_xgb <- car_vars[-n,]
test_label <- car_label[-n]
bst <- xgboost(data = train_xgb, label = train_label, max.depth = 6, eta = 0.3, nround = 10,
nthread = 2)
train_xgb
car_seats_new <- Carseats
car_num <- car_seats_new[,-c(7,10,11)] #数值型变量子集
#分类特征——独热编码
library(caret)
vars <- dummyVars(~ ShelveLoc + Urban +US, data=car_seats_new)
one_hot_vars <- data.frame(predict(vars,car_seats_new[,c(7,10,11)]))
car_vars <- cbind(car_num,one_hot_vars)
names(car_vars)[1] = "label"
View(car_vars)
set.seed(234)
n <- createDataPartition(car_label,p=0.5,list = FALSE)
train_xgb <- car_vars[n,]
test_xgb <- car_vars[-n,]
##转换为稀疏矩阵dgCMatrix格式
train_xgb <- xgb.DMatrix(as.matrix(train_xgb))
test_xgb <- xgb.DMatrix(as.matrix(test_xgb))
class(train_xgb)
bst <- xgboost(data = train_xgb, max.depth = 6, eta = 0.3, nround = 10,nthread = 2)
library(xgboost)
#数据处理
##构建子集
car_seats_new <- Carseats
car_num <- car_seats_new[,-c(7,10,11)] #数值型变量子集
#分类特征——独热编码
library(caret)
vars <- dummyVars(~ ShelveLoc + Urban +US, data=car_seats_new)
one_hot_vars <- data.frame(predict(vars,car_seats_new[,c(7,10,11)]))
car_vars <- cbind(car_num,one_hot_vars)
names(car_vars)[1] = "label"
##分离训练集和测试集
set.seed(234)
n <- createDataPartition(car_label,p=0.5,list = FALSE)
n <- createDataPartition(car_vars$label,p=0.5,list = FALSE)
train_xgb <- car_vars[n,]
View(train_xgb)
train_xgb <- car_vars[n,]
train_label <- train_xgb[,1]
train_xgb$label <- NULL
test_xgb <- car_vars[-n,]
test_label <- test_xgb[,1]
test_xgb$label <- NULL
bst <- xgboost(data = data.matrix(train_xgb),label = train_label, max.depth = 6, eta = 0.3, nround = 10,nthread = 2)
bst <- xgboost(data = data.matrix(train_xgb),label = train_label, max.depth = 6, eta = 0.3, nround = 20,nthread = 2)
bst <- xgboost(data = data.matrix(train_xgb),label = train_label, max.depth = 6, eta = 0.3, nround = 30,nthread = 2)
bst <- xgboost(data = data.matrix(train_xgb),label = train_label, max.depth = 6, eta = 0.3, nround = 50,nthread = 2)
bst <- xgboost(data = data.matrix(train_xgb),label = train_label, max.depth = 6, eta = 0.3, nround = 100,nthread = 2)
bst <- xgboost(data = data.matrix(train_xgb),label = train_label, max.depth = 6, eta = 0.3, nround = 60,nthread = 2)
pred <- predict(bst, test_xgb)
xgb_pred <- predict(bst, data.matrix(test_xgb))
xgb_pred
print(mean((test_label-xgb_pred)^2))
bst <- xgboost(data = data.matrix(train_xgb),label = train_label, max.depth = 6, eta = 0.3, nround = 10,nthread = 2)
xgb_pred <- predict(bst, data.matrix(test_xgb))
print(mean((test_label-xgb_pred)^2))
bst <- xgboost(data = data.matrix(train_xgb),label = train_label, max.depth = 6, eta = 0.3, nround = 5,nthread = 2)
xgb_pred <- predict(bst, data.matrix(test_xgb))
#模型评价
print(mean((test_label-xgb_pred)^2))
bst <- xgboost(data = data.matrix(train_xgb),label = train_label, max.depth = 6, eta = 0.3, nround = 20,nthread = 2)
xgb_pred <- predict(bst, data.matrix(test_xgb))
#模型评价
print(mean((test_label-xgb_pred)^2))
bst <- xgboost(data = data.matrix(train_xgb),label = train_label, max.depth = 6, eta = 0.3, nround = 20)
# 模型预测
xgb_pred <- predict(bst, data.matrix(test_xgb))
#模型评价
print(mean((test_label-xgb_pred)^2))
bst <- xgboost(data = data.matrix(train_xgb),label = train_label, max.depth = 6, eta = 0.3, nround = 20,nthread = 2, objective ='reg:linear')
# 模型预测
xgb_pred <- predict(bst, data.matrix(test_xgb))
#模型评价
print(mean((test_label-xgb_pred)^2))
#保持模型
model <- xgb.dump(xgb, with.stats = T)
model <- xgb.dump(bst, with.stats = T)
model[1:10]
dimnames(data.matrix(train_xgb))[[2]]
names <- dimnames(data.matrix(train_xgb))[[2]]
importance_matrix <- xgb.importance(names,model = bst)
importance_matrix
# 制图
xgb.plot.importance(importance_matrix[1:10,])
barplot(importance_matrix[,1])
View(importance_matrix)
barplot(importance_matrix[,2])
barplot(x= importance_matrix$Gain)
barplot(importance_matrix$Gain)
text(importance_matrix$Feature)
library(ggplot2)
ggplot(data = importance_matrix,aes(x = Gain))+
geom_bar()
ggplot(data = importance_matrix,aes(x= Gain))+
geom_bar(stat = "identify")
```
library(e1071)
simData=function(radius,width,distance,sample_size)
{
aa1=runif(sample_size/2)
aa2=runif(sample_size/2)
rad=(radius-width/2)+width*aa1
theta=pi*aa2
x=rad*cos(theta)
y=rad*sin(theta)
label=1*rep(1,length(x))
x1=rad*cos(-theta)+rad
y1=rad*sin(-theta)-distance
label1=-1*rep(1,length(x1))
n_row=length(x)+length(x1)
data=matrix(rep(0,3*n_row),nrow=n_row,ncol=3)
data[,1]=c(x,x1)
data[,2]=c(y,y1)
data[,3]=c(label,label1)
data
}
dataSim=simData(radius=10,width=6,distance=-6,sample_size=3000)
colnames(dataSim)<-c("x","y","label")
dataSim<-as.data.frame(dataSim)
View(dataSim)
library(ggplot2)
ggplot(data = dataSim,aes(x = x, y = y,fill = factor(label))+
geom_point()
)
ggplot(data = dataSim,aes(x = x, y = y,fill = factor(label)))+
geom_point()
ggplot(data = dataSim,aes(x = x, y = y,fill = label))+
geom_point()
ggplot(data = dataSim,aes(x = x, y = y,color = factor(value)))+
geom_point()
View(dataSim)
ggplot(data = dataSim,aes(x = x, y = y,color = factor(label)))+
geom_point()
m1 <- svm(label ~x+y, data =dataSim,cross=10,type="C-classification",kernel="sigmoid")
m1
summary(m1)
pred1<-fitted(m1)
table(pred1,dataSim[,3])
linear.svm.fit <- svm(label ~ x + y, data = dataSim, kernel ='linear')
with(dataSim, mean(label == ifelse(predict(linear.svm.fit) > 0,1, -1)))
predict(linear.svm.fit)
with(dataSim, mean(label == ifelse(predict(linear.svm.fit) > 0,1, -1)))
polynomial.svm.fit <- svm(label ~ x + y, data = dataSim, kernel ='polynomial')
with(dataSim, mean(label == ifelse(predict(polynomial.svm.fit) >0, 1, -1)))
radial.svm.fit <- svm(label ~ x + y, data = dataSim, kernel ='radial')
with(dataSim, mean(label == ifelse(predict(radial.svm.fit) > 0,1, -1)))
sigmoid.svm.fit <- svm(label ~ x + y, data = dataSim, kernel ='sigmoid')
with(dataSim, mean(label == ifelse(predict(sigmoid.svm.fit) > 0,1, -1)))
df <- cbind(dataSim,
data.frame(LinearSVM = ifelse(predict(linear.svm.fit) > 0, 1, -1),
PolynomialSVM = ifelse(predict(polynomial.svm.fit) > 0, 1, -1),
RadialSVM = ifelse(predict(radial.svm.fit) > 0, 1, -1),
SigmoidSVM = ifelse(predict(sigmoid.svm.fit) > 0, 1, -1)))
View(df)
library(reshape2)
predictions <- melt(df, id.vars = c('x', 'y'))
View(predictions)
library(ggplot2)
View(predictions)
ggplot(predictions, aes(x = x, y = y, color = factor(value))) +
geom_point() +
facet_grid(variable ~ .)
require(mlbench)
library(mxnet)
install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("mxnet")
library(installr)
install.packages("installr")
require(installr)
updateR()
updater()
updateR(setInternet2 = TRUE)
updateR(setInternet2 = FALSE)
install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("mxnet")
require(mxnet)
drat:::addRepo("dmlc")
library(mxnet)
install.packages("mxnet")
install.packages("mxnet")
library(mxnet)
drat:::addRepo("dmlc")
install.packages("mxnet")
require(mxnet)
update.packages(checkBuilt=TRUE, ask=FALSE)
require(mxnet)
library(mxnet)
require(mlbench)
install.packages("mlbench")
require(mlbench)
library(nnet)
install.packages("rpart.plot")
install.packages('survival')
install.packages('boBy')
library(rattle)
rattle()
p <- ggplot(mpg, aes(x=cty, y=hwy))
g3 <- p + geom_point(aes(colour=class,size=displ),
alpha=0.5,position = "jitter")+
stat_smooth()+
scale_size_continuous(range = c(4, 10))+
facet_wrap(~ year,ncol=1)+
labs(y='每加仑高速公路行驶距离',
x='每加仑城市公路行驶距离',title = '汽车油耗与车型')+
guides(size=guide_legend(title='排量'),
colour = guide_legend(title='车型',
override.aes=list(size=5)))
print(g3)
library(rCharts)
names(iris) = gsub("\\.", "", names(iris))
p1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
p1
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
library(rCharts)
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
hair_eye_male[,1] <- paste0("Hair",hair_eye_male[,1])
hair_eye_male[,2] <- paste0("Eye",hair_eye_male[,2])
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male,
type = "multiBarChart")
n1
library(rCharts)
a <- hPlot(Pulse ~ Height, data = MASS::survey, type = "bubble",
title = "Zoom demo", subtitle = "bubble chart",
size = "Age", group = "Exer")
a$colors('rgba(223, 83, 83, .5)', 'rgba(119, 152, 191, .5)',
'rgba(60, 179, 113, .5)')
a$chart(zoomType = "xy")
a$exporting(enabled = T)
a
library(rCharts)
a <- hPlot(Pulse ~ Height, data = MASS::survey, type = "bubble",
title = "Zoom demo", subtitle = "bubble chart",
size = "Age", group = "Exer")
a$colors('rgba(223, 83, 83, .5)', 'rgba(119, 152, 191, .5)',
'rgba(60, 179, 113, .5)')
a$chart(zoomType = "xy")
a$exporting(enabled = T)
a
a <- hPlot(Pulse ~ Height, data = MASS::survey, type = "bubble",
title = "Zoom demo", subtitle = "bubble chart",
size = "Age", group = "Exer")
library(rCharts)
a <- hPlot(Pulse ~ Height, data = MASS::survey, type = "bubble",
title = "Zoom demo", subtitle = "bubble chart",
size = "Age", group = "Exer")
a$colors('rgba(223, 83, 83, .5)', 'rgba(119, 152, 191, .5)',
'rgba(60, 179, 113, .5)')
a$chart(zoomType = "xy")
a$exporting(enabled = T)
a
data = MASS::survey
a <- hPlot(Pulse ~ Height, data = MASS::survey, type = "bubble",
title = "Zoom demo", subtitle = "bubble chart",
size = "Age", group = "Exer")
a$colors('rgba(223, 83, 83, .5)', 'rgba(119, 152, 191, .5)',
'rgba(60, 179, 113, .5)')
a$chart(zoomType = "xy")
a$exporting(enabled = T)
a
a <- hPlot(Pulse ~ Height, data = MASS::survey, type = "bubble",
title = "Zoom demo", subtitle = "bubble chart",
size = "Age", group = "Exer")
data = MASS::survey
str(data)
a <- hPlot(NW.Hnd ~ Wr.Hnd, data = MASS::survey, type = "bubble",
title = "Zoom demo", subtitle = "bubble chart",
size = "Age", group = "Exer")
a$colors('rgba(223, 83, 83, .5)', 'rgba(119, 152, 191, .5)',
'rgba(60, 179, 113, .5)')
a$chart(zoomType = "xy")
a$exporting(enabled = T)
a
hPlot(NW.Hnd ~ Wr.Hnd, data = MASS::survey, type = "bubble",
title = "Zoom demo", subtitle = "bubble chart",
size = "Age", group = "Exer",na.rm = TRUE)
library(MASS)
data("survey")
sur <- survey
hPlot(NW.Hnd ~ Wr.Hnd, data = sur, type = "bubble",
title = "Zoom demo", subtitle = "bubble chart",
size = "Age", group = "Exer",na.rm = TRUE)
library(rCharts)
a <- hPlot(Pulse ~ Height, data = MASS::survey, type = "bubble",
title = "Zoom demo", subtitle = "bubble chart",
size = "Age", group = "Exer")
a$colors('rgba(223, 83, 83, .5)', 'rgba(119, 152, 191, .5)',
'rgba(60, 179, 113, .5)')
a$chart(zoomType = "xy")
a$exporting(enabled = T)
a
library(rCharts)
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
hair_eye_male[,1] <- paste0("Hair",hair_eye_male[,1])
hair_eye_male[,2] <- paste0("Eye",hair_eye_male[,2])
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male,
type = "multiBarChart")
n1
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
library(rCharts)
a <- hPlot(Pulse ~ Height, data = MASS::survey, type = "bubble",
title = "Zoom demo", subtitle = "bubble chart",
size = "Age", group = "Exer")
a$colors('rgba(223, 83, 83, .5)', 'rgba(119, 152, 191, .5)',
'rgba(60, 179, 113, .5)')
a$chart(zoomType = "xy")
a$exporting(enabled = T)
a
str(mpg)
a <- hPlot(cty ~ hwy, data = mpg, type = "bubble",
title = "Zoom demo", subtitle = "bubble chart",
size = "Age", group = "Exer",na.rm = TRUE)
hPlot(x = "Wr.Hnd", y = "NW.Hnd", data = MASS::survey, type = c("line",
"bubble", "scatter"), group = "Clap", size = "Age")
library(rCharts)
library(rattle)
rattle()
gc(TRUE)
col1 <- runif (12^5, 0, 2)
col2 <- rnorm (12^5, 0, 2)
col3 <- rpois (12^5, 3)
col4 <- rchisq (12^5, 2)
df <- data.frame (col1, col2, col3, col4)
rm(col1,col2,col3,col4)
output <- character (nrow(df)) # initialize output vector
system.time({
for (i in 1:nrow(df)) {
if ((df[i, "col1"] + df[i, "col2"] + df[i, "col3"] + df[i, "col4"]) > 4) {
output[i] <- "greater_than_4"
} else {
output[i] <- "lesser_than_4"
}
}
df$output})
col1 <- runif (12^5, 0, 2)
col2 <- rnorm (12^5, 0, 2)
col3 <- rpois (12^5, 3)
col4 <- rchisq (12^5, 2)
df <- data.frame (col1, col2, col3, col4)
rm(col1,col2,col3,col4)
library(foreach)
library(doSNOW)
library(doParallel)
detectCores()
cl <- makeCluster(4, type="SOCK") # for 4 cores machine
registerDoSNOW (cl)
condition <- (df$col1 + df$col2 + df$col3 + df$col4) > 4
system.time({
output <- foreach(i = 1:nrow(df), .combine=c) %dopar% {
if (condition[i]) {
return("greater_than_4")
} else {
return("lesser_than_4")
}
}
})
if (!suppressWarnings(require("rJava"))) {
install.packages("rJava")
require("rJava")
}
library(rJava0)
library(rJava)
if (!suppressWarnings(require("rJava"))) {
install.packages("rJava")
require("rJava")
}
library(rJava)
install.packages('SnowballC')
library(rm)
library(tm)
library(tm)
vignette('tm')
system.file()
system.file(package = "tm")
system.file('texts','txt',package = 'tm')
a <- DirSource(system.file('texts','txt',package = 'tm'),encoding = 'UTF-8',)
a <- DirSource(system.file('texts','txt',package = 'tm'),encoding = 'UTF-8',readerControl = list(language = 'lat')
))
a <- VCorpus(DirSource(system.file('texts','txt',package = 'tm'),encoding = 'UTF-8'),readerControl = list(language = 'lat'))
a <- DirSource(system.file('texts','txt',package = 'tm'),encoding = 'UTF-8',readerControl = list(language = 'lat')
)
a <- VCorpus(DirSource(system.file('texts','txt',package = 'tm'),encoding = 'UTF-8'),readerControl = list(language = 'lat'))
a
setwd("F:/R/datasciences/NLP")
writeCorpus(a)
inspect(a)
print(a)
summary(a)
writeLines(as.character(a[[2]]))
lapply(ovid[1:2], as.character)
lapply(a[1:2], as.character)
new_a <- tm_map(a,stripWhitespace)
new_a
new_a[[1]]
writeLines(new_a[1])
writeLines(as.character(new_a[1])
)
writeLines(as.character(new_a[[2]]))
reut21578 <- system.file("texts", "crude", package = "tm")
reuters <- Corpus(DirSource(reut21578), readerControl = list(reader = readReut21578XML))
reuters
inspect(reuters)
print(reuters)
summary(reuters)
writeLines(as.character(reuters[[2]]))
lapply(reuters[1:2], as.character)
reuters
reuters <- tm_map(reuters,stripWhitespace)
reuters <- tm_map(reuters,PlainTextDocument)
writeLines(as.character(reuters[[2]]))
reuters <- tm_map(reuters,stripWhitespace)
writeLines(as.character(reuters[[2]]))
reuters <- tm_map(reuters, tolower)
writeLines(as.character(reuters[[2]]))
reuters <- tm_map(reuters,removeWords,stopwords('english'))
writeLines(as.character(reuters[[2]]))
tm_map(reuters,stemDocument)
writeLines(as.character(reuters[[2]]))
meta(reuters[[1]])
meta(crude)
meta(crude[[1]])
DublinCore(crude[[1]],"Creator") <- "Ano Nymos"
reuters
reuters[[1]]
crude <- tm_map(reuters,stemDocument)
crude[[1]]
meta(crude)
meta(crude[[1]])
meta(crude)
crude
meta(crude,"foo") <- letters(1:20)
meta(crude,"foo") <- letters(1:20)
meta(crude,"foo") <- letters[1:20]
meta(crude)
meta(crude,tag = "test",type = "corpus") <- "test meta"
meta(crude,type = "corpus")
dtm <- DocumentTermMatrix(reuters)
reut21578 <- system.file("texts", "crude", package = "tm")
reuters <- Corpus(DirSource(reut21578), readerControl = list(reader = readReut21578XML))
reuters <- tm_map(reuters,PlainTextDocument)
#删除空白
reuters <- tm_map(reuters,stripWhitespace)
#转换为小写
reuters <- tm_map(reuters, content_transformer(tolower))
#去掉停词
reuters <- tm_map(reuters,removeWords,stopwords('english'))
dtm <- DocumentTermMatrix(reuters)
inspect(dtm[1:5, 100:105])
d<-c("price","crude","oil","use")   #以这几个关键词为查询工具
inspect(DocumentTermMatrix(reuters,control=list(dictionary=d)))
findFreqTerms(dtm, 50)
findAssocs(dtm,"opec",0.8)
dtm1<- removeSparseTerms(dtm, sparse=0.6)
inspect(dtm1)
data <- as.data.frame(inspect(dtm1))
View(data)
removeSparseTerms(dtm, sparse=0.6)
removeSparseTerms(dtm, sparse=0.4)
data.scale <- scale(data)
data.scale
d <- dist(data.scale, method = "euclidean")
fit <- hclust(d, method="ward.D")
plot(fit,main ="文件聚类分析")
plot(fit,main ="文件聚类分析",hang = -1)
inspect(dtm1)
removeSparseTerms(dtm, sparse=0.6)
dtm1<- removeSparseTerms(dtm, sparse=0.6)
dtm1
inspect(removeSparseTerms(dtm, 0.4))
inspect(DocumentTermMatrix(reuters,control=list(dictionary=d)))
View(data)
row.names(data)
row.names(data)<- 1:20
View(data)
data.scale <- scale(data)
d <- dist(data.scale, method = "euclidean")
fit <- hclust(d, method="ward.D")
plot(fit,main ="文件聚类分析",hang = -1)
SnowballStemmer(c('functions', 'stemming', 'liked', 'doing'))
library(SnowballC)
SnowballStemmer(c('functions', 'stemming', 'liked', 'doing'))
stemDocument(c('functions', 'stemming', 'liked', 'doing'))
getTokenizers(' 中华人民共和国成立于1949年')
NGramTokenizer(' 中华人民共和国成立于1949年')
getTokenizers('中华人民共和国成立于1949年')
data("crude")
MC_tokenizer(crude[[1]])
scan_tokenizer(crude[[1]])
MC_tokenizer('中华人民共和国成立于1949年')
MC_tokenizer('I love you')
scan_tokenizer('I love you')
MC_tokenizer('我爱你')
